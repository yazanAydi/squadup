rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for security checks
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isCreator(creatorId) {
      return isAuthenticated() && request.auth.uid == creatorId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isValidUserData(data) {
      return data.keys().hasAll(['username', 'email', 'createdAt']) &&
             data.username is string && data.username.size() > 0 && data.username.size() <= 50 &&
             !data.username.matches('.*[<>\"\'].*') && // Prevent XSS
             data.email is string && data.email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$') &&
             data.createdAt is timestamp;
    }
    
    function isValidGameData(data) {
      return data.keys().hasAll(['name', 'sport', 'gameDateTime', 'maxPlayers', 'createdBy']) &&
             data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
             !data.name.matches('.*[<>\"\'].*') && // Prevent XSS
             data.sport is string && data.sport.size() > 0 && data.sport.size() <= 50 &&
             !data.sport.matches('.*[<>\"\'].*') && // Prevent XSS
             data.gameDateTime is timestamp &&
             data.maxPlayers is int && data.maxPlayers > 0 && data.maxPlayers <= 100 &&
             data.createdBy is string;
    }
    
    function isValidTeamData(data) {
      return data.keys().hasAll(['name', 'sport', 'createdBy']) &&
             data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
             !data.name.matches('.*[<>\"\'].*') && // Prevent XSS
             data.sport is string && data.sport.size() > 0 && data.sport.size() <= 50 &&
             !data.sport.matches('.*[<>\"\'].*') && // Prevent XSS
             data.createdBy is string;
    }

    // Users - Users can only read/write their own profile
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && isValidUserData(request.resource.data);
      allow update: if isOwner(userId) && 
        // Prevent manipulation of critical fields
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'email', 'createdAt', 'role']) &&
        // Allow updates to profile fields only
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['username', 'profilePicUrl', 'sports', 'level', 'city', 'goals', 'onboardingCompleted', 'onboardingCompletedAt', 'phone', 'location']);
      allow delete: if isAdmin(); // Only admins can delete user documents
    }
    
    // Teams - Users can only manage teams they created
    match /teams/{teamId} {
      allow read: if isAuthenticated(); // Anyone can read team info
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.createdBy &&
        isValidTeamData(request.resource.data);
      allow update: if isCreator(resource.data.createdBy) &&
        // Prevent manipulation of critical fields
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['id', 'createdBy', 'createdAt']);
      allow delete: if isAdmin(); // Only admins can delete team documents
    }
    
    // Games - Users can only manage games they created
    match /games/{gameId} {
      allow read: if isAuthenticated(); // Anyone can read game info
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.createdBy &&
        isValidGameData(request.resource.data);
      allow update: if isCreator(resource.data.createdBy) &&
        // Prevent manipulation of critical fields
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['id', 'createdBy', 'createdAt']) &&
        // Allow specific game state updates
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['players', 'currentPlayers', 'status', 'updatedAt']);
      allow delete: if isAdmin(); // Only admins can delete game documents
    }
    
    // Team invitations - Only team creators can manage invitations
    match /team_invitations/{invitationId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.invitedBy);
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.invitedBy &&
        request.resource.data.keys().hasAll(['userId', 'invitedBy', 'teamId', 'status', 'createdAt']);
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId &&
        // Only allow status updates (accept/decline)
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'respondedAt']);
      allow delete: if isAdmin(); // Only admins can delete invitation documents
    }
    
    // Game bookings - Users can only manage their own bookings
    match /bookings/{bookingId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.fieldOwnerId);
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.keys().hasAll(['userId', 'fieldId', 'gameId', 'date', 'status', 'createdAt']);
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId &&
        // Only allow status updates
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']);
      allow delete: if isAdmin(); // Only admins can delete booking documents
    }
    
    // Fields - Field owners can manage their fields
    match /fields/{fieldId} {
      allow read: if isAuthenticated(); // Anyone can read field info
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.ownerId &&
        request.resource.data.keys().hasAll(['name', 'location', 'sports', 'ownerId', 'createdAt']);
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.ownerId &&
        // Prevent manipulation of critical fields
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['id', 'ownerId', 'createdAt']);
      allow delete: if isAdmin(); // Only admins can delete field documents
    }
    
    // Statistics - Users can only manage their own stats
    match /statistics/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && 
        request.resource.data.keys().hasAll(['userId', 'gamesPlayed', 'mvps', 'createdAt']);
      allow update: if isOwner(userId) &&
        // Only allow specific stat updates
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['gamesPlayed', 'mvps', 'updatedAt']);
      allow delete: if isAdmin(); // Only admins can delete stat documents
    }
    
    // User sessions - Users can manage their own sessions
    match /user_sessions/{sessionId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
    
    // Rate limits - Users can manage their own rate limit data
    match /rate_limits/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Audit logs - Only admins can access audit logs
    match /audit_logs/{logId} {
      allow read, write: if isAdmin();
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
