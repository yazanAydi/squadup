rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isTeamMember(teamId) {
      return request.auth.uid in resource.data.members;
    }
    
    function isTeamOwner(teamId) {
      return request.auth.uid == resource.data.createdBy;
    }
    
    function isGameParticipant(gameId) {
      return request.auth.uid in resource.data.players;
    }
    
    function isGameCreator(gameId) {
      return request.auth.uid == resource.data.createdBy;
    }
    
    // Enhanced input validation functions
    function isValidEmail(email) {
      return email is string &&
             email.size() > 0 &&
             email.size() <= 100 &&
             email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function isValidUsername(username) {
      return username is string &&
             username.size() >= 3 &&
             username.size() <= 50 &&
             username.matches('^[a-zA-Z0-9_-]+$');
    }
    
    function isValidDisplayName(displayName) {
      return displayName is string &&
             displayName.size() > 0 &&
             displayName.size() <= 100 &&
             !displayName.matches('.*[<>"\'].*'); // Prevent XSS
    }
    
    function isValidBio(bio) {
      return bio == null || 
             (bio is string && 
              bio.size() <= 500 &&
              !bio.matches('.*[<>"\'].*')); // Prevent XSS
    }
    
    function isValidCity(city) {
      return city is string &&
             city.size() > 0 &&
             city.size() <= 100 &&
             !city.matches('.*[<>"\'].*'); // Prevent XSS
    }
    
    function isValidTeamName(teamName) {
      return teamName is string &&
             teamName.size() > 0 &&
             teamName.size() <= 100 &&
             !teamName.matches('.*[<>"\'].*'); // Prevent XSS
    }
    
    function isValidGameTitle(title) {
      return title is string &&
             title.size() > 0 &&
             title.size() <= 200 &&
             !title.matches('.*[<>"\'].*'); // Prevent XSS
    }
    
    function isValidDescription(description) {
      return description == null || 
             (description is string && 
              description.size() <= 1000 &&
              !description.matches('.*[<>"\'].*')); // Prevent XSS
    }
    
    function isValidUserData() {
      return request.resource.data.keys().hasAll(['displayName', 'email', 'createdAt']) &&
             isValidEmail(request.resource.data.email) &&
             isValidDisplayName(request.resource.data.displayName) &&
             request.resource.data.createdAt is timestamp;
    }
    
    function isValidTeamData() {
      return request.resource.data.keys().hasAll(['name', 'sport', 'createdBy', 'createdAt']) &&
             isValidTeamName(request.resource.data.name) &&
             request.resource.data.sport is string &&
             request.resource.data.sport.size() > 0 &&
             request.resource.data.createdBy is string &&
             request.resource.data.createdAt is timestamp;
    }
    
    function isValidGameData() {
      return request.resource.data.keys().hasAll(['name', 'sport', 'createdBy', 'createdAt']) &&
             isValidGameTitle(request.resource.data.name) &&
             request.resource.data.sport is string &&
             request.resource.data.sport.size() > 0 &&
             request.resource.data.createdBy is string &&
             request.resource.data.createdAt is timestamp;
    }
    
    // Enhanced rate limiting with proper time windows
    function isRateLimited(operation, maxRequests, windowSeconds) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      let operations = userDoc.data.rateLimit[operation] || [];
      let now = timestamp.date();
      let windowStart = now.toMillis() - (windowSeconds * 1000);
      
      // Remove old operations outside the window
      operations = operations.filter(op => op.toMillis() > windowStart);
      
      return operations.size() >= maxRequests;
    }
    
    // Rate limiting configuration
    function isUserCreateRateLimited() {
      return isRateLimited('user_create', 5, 3600); // 5 per hour
    }
    
    function isUserUpdateRateLimited() {
      return isRateLimited('user_update', 20, 3600); // 20 per hour
    }
    
    function isTeamCreateRateLimited() {
      return isRateLimited('team_create', 3, 3600); // 3 per hour
    }
    
    function isTeamUpdateRateLimited() {
      return isRateLimited('team_update', 10, 3600); // 10 per hour
    }
    
    function isGameCreateRateLimited() {
      return isRateLimited('game_create', 5, 3600); // 5 per hour
    }
    
    function isGameUpdateRateLimited() {
      return isRateLimited('game_update', 15, 3600); // 15 per hour
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own profile
      allow read: if isAuthenticated() && isOwner(userId);
      
      // Users can create their own profile
      allow create: if isAuthenticated() && 
                      isOwner(userId) && 
                      isValidUserData() &&
                      !isUserCreateRateLimited();
      
      // Users can update their own profile
      allow update: if isAuthenticated() && 
                      isOwner(userId) && 
                      isValidUserData() &&
                      !isUserUpdateRateLimited();
      
      // Users can delete their own profile
      allow delete: if isAuthenticated() && 
                      isOwner(userId) &&
                      !isRateLimited('user_delete', 1, 86400); // 1 per day
      
      // Public read access for basic user info (for team/game displays)
      allow read: if isAuthenticated() && 
                    resource.data.keys().hasAll(['displayName', 'sports', 'city']) &&
                    isValidDisplayName(resource.data.displayName) &&
                    isValidCity(resource.data.city);
    }
    
    // Teams collection
    match /teams/{teamId} {
      // Anyone can read public team info
      allow read: if isAuthenticated();
      
      // Authenticated users can create teams
      allow create: if isAuthenticated() && 
                      isValidTeamData() &&
                      isOwner(request.resource.data.createdBy) &&
                      !isTeamCreateRateLimited();
      
      // Team owners can update their teams
      allow update: if isAuthenticated() && 
                      isTeamOwner(teamId) &&
                      isValidTeamData() &&
                      !isTeamUpdateRateLimited();
      
      // Team owners can delete their teams
      allow delete: if isAuthenticated() && 
                      isTeamOwner(teamId) &&
                      !isRateLimited('team_delete', 1, 86400); // 1 per day
      
      // Team members can update member list (for joining/leaving)
      allow update: if isAuthenticated() && 
                      (isTeamOwner(teamId) || isTeamMember(teamId)) &&
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['members', 'memberCount', 'lastUpdated', 'pendingRequests']) &&
                      !isRateLimited('team_member_update', 10, 3600); // 10 per hour
    }
    
    // Games collection
    match /games/{gameId} {
      // Anyone can read public game info
      allow read: if isAuthenticated();
      
      // Authenticated users can create games
      allow create: if isAuthenticated() && 
                      isValidGameData() &&
                      isOwner(request.resource.data.createdBy) &&
                      !isGameCreateRateLimited();
      
      // Game creators can update their games
      allow update: if isAuthenticated() && 
                      isGameCreator(gameId) &&
                      isValidGameData() &&
                      !isGameUpdateRateLimited();
      
      // Game creators can delete their games
      allow delete: if isAuthenticated() && 
                      isGameCreator(gameId) &&
                      !isRateLimited('game_delete', 1, 86400); // 1 per day
      
      // Participants can update participant list (for joining/leaving)
      allow update: if isAuthenticated() && 
                      (isGameCreator(gameId) || isGameParticipant(gameId)) &&
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['players', 'currentPlayers', 'status', 'lastUpdated', 'pendingRequests']) &&
                      !isRateLimited('game_participant_update', 10, 3600); // 10 per hour
    }
    
    // Rate limiting metadata collection
    match /rateLimit/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    // Admin operations (if needed)
    match /admin/{document=**} {
      allow read, write: if isAuthenticated() && 
                           request.auth.token.admin == true &&
                           !isRateLimited('admin_operation', 100, 3600); // 100 per hour
    }
    
    // Deny all other operations
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
